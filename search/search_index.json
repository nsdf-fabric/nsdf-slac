{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nexus-DM Documentation","text":"<p>Nexus-DM is a collaborative initiative between the National Science Data Fabric (NSDF) and partner institutions, including the University of Colorado Denver and the University of Minnesota. The project delivers an integrated suite of tools for accessing, visualizing, and analyzing dark matter data. By combining ease of access with scientific depth, the initiative empowers the community to accelerate discovery in dark matter research.</p> <p>To learn more about the background and goals of this effort, read our paper: \"The Making of a Community Dark Matter Dataset with the National Science Data Fabric\".</p> <p></p> <p>This set of guides is designed to help you interact and analyze dark matter datasets such as R68 and R76, using our suite of tools. Whether you are just getting started or diving into advanced workflows, these instructions will walk you through installation, setup, and usage.</p>"},{"location":"#quick-start","title":"\u26a1Quick Start","text":"<ul> <li>\ud83d\udd27 CLI Guide: Learn how to access and download dark matter datasets using the <code>nsdf-cli</code> command-line interface.</li> <li>\ud83d\udcda Library Guide: Explore how to load and analyze a dark matter dataset using the Python API.</li> <li>\ud83d\udcca Dashboard Guide: Understand the components of the web-based dashboard for visualizing dark matter events and detectors.</li> </ul>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Web-based visualization: Explore midas files, isolate detector channels, and examine detailed metadata such as trigger types and time stamps, all within the browser with the NSDF Dark Matter Dashboard.</li> <li>Easy data access via CLI: Effortlessly search, and download dark matter data files using the NSDF Dark Matter CLI.</li> <li>Workflow integration: Leverage NSDF Dark Matter Library to load and manipulate dark matter data, enabling seamless integration into workflow pipelines, including machine learning.</li> <li>Search events: Search for specific events using the autocomplete input.</li> <li>Visualization: Visualize channel waveforms from multiple detectors.</li> <li>Channel isolation: Select or deselect channels from one or more detectors.</li> <li>Event metadata: View information about the trigger type, readout type, and timestamp of the events.</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Start by exploring the CLI Guide to download data or visit the web-based Dashboard to visualize the data.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for our community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team privately at info@nationalsciencedatafabric.org and mtaufer@utk.edu. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"acknowledgment/","title":"Acknowledgements","text":"<p>This research is supported by the National Science Foundation (NSF) awards #2138811, #2103845, #2334945, #2138296, and #2331152. The work presented here is partly obtained using resources from ACCESS TG-CIS210128. We thank the Scientist Cloud Storage.</p>"},{"location":"cli/","title":"NSDF Dark Matter CLI","text":"<p>The <code>NSDF Dark Matter CLI</code> offers a pool of operations to access and download dark matter datasets. The CLI serves as a top level component in a workflow to download data which can then be analyzed with the NSDF Dark Matter Library</p>"},{"location":"cli/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Virtual Environment</p> <p>To begin, make sure you have Python 3.10 or higher installed on your machine. You can download it from the official website: Install Python.</p> <p>In this guide, we will be using uv to manage a virtual environment. You can install <code>uv</code> by following this installation guide.</p> <p>Note</p> <p>If you prefer, you can use a different environment manager such as conda or Python's built-in venv</p>"},{"location":"cli/#creating-the-environment","title":"Creating the environment","text":"<p>To create a new virtual environment, run the following command in your terminal:</p> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>uv venv darkmatter_cli_env --python 3.10\n</code></pre> <p>Conda</p> <pre><code>conda create -n darkmatter_cli_env python=3.10\n</code></pre> <p>Python venv</p> <pre><code>python -m venv darkmatter_cli_env\n</code></pre>"},{"location":"cli/#activating-the-environment","title":"Activating the environment","text":"<p>Next, we activate the environment:</p> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>source darkmatter_cli_env/bin/activate\n</code></pre> <p>Conda</p> <pre><code>conda activate darkmatter_cli_env\n</code></pre> <p>Python venv</p> <pre><code>source darkmatter_cli_env/bin/activate\n</code></pre> <p>You should now see the environment name in your terminal prompt, indicating it\u2019s active.</p>"},{"location":"cli/#installing-the-cli","title":"Installing the CLI","text":""},{"location":"cli/#pip-recommended","title":"pip (recommended)","text":"<p>To install the CLI via pip, run the following command.</p> <p>CLI pip installation</p> <pre><code>pip install nsdf-dark-matter-cli\n</code></pre>"},{"location":"cli/#from-release","title":"From release","text":"<p>To install the CLI from releases, download the <code>wheel</code> file.</p> <pre><code>wget https://github.com/nsdf-fabric/nsdf-slac/releases/download/v0.1.0/nsdf_dark_matter_cli-0.1.0-py3-none-any.whl\n</code></pre> <p>Now, we can install the CLI by passing the wheel file with the following command:</p> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>uv pip install nsdf_dark_matter_cli-0.1.0-py3-none-any.whl\n</code></pre> <p>Conda</p> <pre><code>pip install nsdf_dark_matter_cli-0.1.0-py3-none-any.whl\n</code></pre> <p>Python venv</p> <pre><code>pip install nsdf_dark_matter_cli-0.1.0-py3-none-any.whl\n</code></pre> <p>That's it! The CLI is now installed and ready to use. We can start working with it.</p>"},{"location":"cli/#the-nsdf-dark-matter-cli","title":"\ud83d\udda5\ufe0f The NSDF Dark Matter CLI","text":"<p>To explore all available CLI commands and options, run the following help command:</p> <pre><code>nsdf-cli --help\n</code></pre> <p></p>"},{"location":"cli/#listing-remote-files","title":"Listing remote files","text":"<p>Want to know what files are available to download? Use the ls command to list them. You can also limit how many results you see by passing the <code>--limit</code> flag.</p> <pre><code>nsdf-cli ls --limit 5\n</code></pre> <p></p> <p>Looking for something specific? Use the <code>--prefix</code> flag to filter files by name:</p> <pre><code>nsdf-cli ls --prefix 072 --limit 5\n</code></pre> <p></p> <p>Great! we have found files from the R76 dataset.</p>"},{"location":"cli/#downloading-a-dataset-locally","title":"Downloading a dataset locally","text":"<p>Once you've found the file you want, downloading it is easy with the <code>download</code> command:</p> <pre><code>nsdf-cli download 07180827_0000_F0001\n</code></pre> <p></p> <p>Downloaded files go into the idx directory, and each one gets its own subfolder based on the <code>mid_id</code>. After downloading a few datasets, your folder might look like this:</p> <pre><code>idx/\n   |\n   07180925_0000_F0001/\n   |\n   07181007_0000_F0001/\n   |\n   07180916_0000_F0002/\n</code></pre> <p>A <code>mid_id</code> directory is composed of the following files:</p> <pre><code>07180925_0000_F0001/\n                   |\n                   07180827_0000_F0001.csv\n                   |\n                   07180827_0000_F0001.txt\n                   |\n                   07180827_0000_F0001.idx\n                   |\n                   07180925_0000_F0001/\n                                      |\n                                      0000.bin\n</code></pre>"},{"location":"cli/#next-steps","title":"Next Steps","text":"<p>Now that you have some data, it\u2019s time to dive into analysis! Head over to the NSDF Dark Matter Library guide to learn how to start working with the dataset.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are always welcome, no matter how large or small. Before contributing, please read the Code of Conduct and follow the directions below:</p>"},{"location":"contributing/#communication-style","title":"Communication Style","text":"<ul> <li>Always leave a detailed description in the pull request. Leave nothing ambiguous for the reviewer.</li> <li>Always review your code first. Run the project locally and test it before requesting a review.</li> <li>Always leave screenshots for visual changes.</li> <li>If you are addressing an open issue, make sure to link it to your pull request.</li> <li>Communicate in the GitHub repository. Whether in the issue or the pull request, keeping the lines of communication open and visible to everyone on the team helps everyone around you.</li> </ul>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"contributing/#cloning-the-repository","title":"Cloning the Repository","text":"<p>For all the components of the project CLI, Library, and Dashboard you will need to follow the next steps:</p> <ol> <li>Fork the nsdf-slac repository.</li> <li>Clone the forked repository to your local machine.</li> </ol>"},{"location":"contributing/#python","title":"Python","text":"<p>Virtual Environment</p> <p>To begin, make sure you have Python&gt;=3.10 or higher installed on your machine. You can download it from the official website: Install Python. All of the components of the project use uv as the Python package and project manager. Therefore, in order to develop effectively, it is recommended to install uv by following this installation guide.</p>"},{"location":"contributing/#contributing_1","title":"Contributing","text":""},{"location":"contributing/#cli","title":"\ud83d\udda5\ufe0f CLI","text":"<p>These steps will help you get started with contributing to the NSDF Dark Matter CLI</p>"},{"location":"contributing/#working-directory","title":"Working Directory","text":"<p>All the code for the NSDF Dark Matter CLI is located in the <code>nsdf_dark_matter_cli</code> directory in the root of the project, you will need to move into it with the following command:</p> <pre><code>cd nsdf_dark_matter_cli\n</code></pre>"},{"location":"contributing/#installing-dependencies","title":"Installing Dependencies","text":"<p>To install all the dependencies of the project, you can run the following command:</p> <pre><code>uv sync\n</code></pre>"},{"location":"contributing/#activating-the-environment","title":"Activating the Environment","text":"<p>Lastly, you will need to activate the environment with the following command:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"contributing/#developing-code","title":"Developing Code","text":"<p>Now that you have the environment activated, you are ready to contribute code to the CLI. A typical development workflow might look like this.</p> <ol> <li>Follow the steps outlined in Creating a Branch.</li> <li>Install the CLI in editable mode with the following <code>uv pip install -e .</code>.</li> <li>Implement your coding changes following the structure of the project. For a new command add it to <code>src/nsdf_dark_matter_cli/cli.py</code>.</li> <li>Test your changes with the corresponding calls to <code>nsdf-cli</code>.</li> <li>Follow all the other steps starting from Opening a Pull Request.</li> </ol>"},{"location":"contributing/#library","title":"\ud83d\udcda Library","text":"<p>These steps will help you get started with contributing to the NSDF Dark Matter Library</p>"},{"location":"contributing/#working-directory_1","title":"Working Directory","text":"<p>All the code for the NSDF Dark Matter Library is located in the <code>nsdf_dark_matter</code> directory in the root of the project, you will need to move into it with the following command:</p> <pre><code>cd nsdf_dark_matter\n</code></pre>"},{"location":"contributing/#installing-dependencies_1","title":"Installing Dependencies","text":"<p>To install all the dependencies of the project, you can run the following command:</p> <pre><code>uv sync\n</code></pre>"},{"location":"contributing/#activating-the-environment_1","title":"Activating the Environment","text":"<p>Lastly, you will need to activate the environment with the following command:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"contributing/#developing-code_1","title":"Developing Code","text":"<p>Now that you have the environment activated, you are ready to contribute code to the library. A typical development workflow might look like this.</p> <ol> <li>Follow the steps outlined in Creating a Branch.</li> <li>Implement your coding changes following the structure of the project. For a new module add it under <code>src/nsdf_dark_matter</code>, or add code an existing module. Then add corresponding tests under <code>tests</code>.</li> <li>Make sure you do not introduce breaking changes by passing all the tests.</li> <li>Follow all the other steps starting from Opening a Pull Request.</li> </ol>"},{"location":"contributing/#documentation","title":"\ud83d\udcc4 Documentation","text":"<p>These steps will help you get started with contributing to the NSDF Dark Matter documentation</p>"},{"location":"contributing/#virtual-environment","title":"Virtual Environment","text":"<p>At the root of the project, you can create a new virtual environment with the following command:</p> <pre><code>uv venv docs_env --python 3.10\n</code></pre>"},{"location":"contributing/#activating-the-environment_2","title":"Activating the Environment","text":"<p>Activate the environment with the following command:</p> <pre><code>source docs_env/bin/activate\n</code></pre>"},{"location":"contributing/#installing-dependencies_2","title":"Installing Dependencies","text":"<p>You will need to install the following dependencies to develop locally:</p> <pre><code>uv pip install mkdocs mkdocs-material\n</code></pre>"},{"location":"contributing/#developing-code_2","title":"Developing Code","text":"<p>Now that you have the environment activated, you are ready to contribute code to the documentation. A typical development workflow might look like this.</p> <ol> <li>Follow the steps outlined in Creating a Branch.</li> <li>Spin up the documentation page locally by running <code>mkdocs serve</code>.</li> <li>Implement your documentation changes following the structure of the project. All of the project documentation is under the <code>docs</code> directory. Make sure to put assets in the respective directory under <code>docs/assets</code>. For adding gifs see creating gifs.</li> <li>Follow all the other steps starting from Opening a Pull Request.</li> </ol>"},{"location":"contributing/#creating-gifs","title":"Creating gifs","text":"<p>Gifs in the documentation are generated by the fantastic vhs library from Charm Bracelet. To add a new gif document the .tape script in the <code>docs/assets/tapes</code> folder and then add the gif artifact to the appropriate folder.</p>"},{"location":"contributing/#pull-requests-pr","title":"Pull Requests (PR)","text":""},{"location":"contributing/#creating-a-branch","title":"Creating a Branch","text":"<p>From your forked repository, you must create a new branch from the default <code>main</code>. Use the naming convention type/description-of-work when naming a branch, i.e, <code>docs/adding-gif-to-cli</code> or <code>feat/adding-detector-method-to-library</code>. The following are common type of pull requests:</p> <ul> <li><code>feat</code>: New feature/functionality added.</li> <li><code>fix</code>: Fixes to a particular code defect/bug.</li> <li><code>docs</code>: Adds or fixes the documentation content.</li> <li><code>test</code>: Adds tests to the code.</li> <li><code>ci</code>: Adds new components/actions to the continuous integration pipeline, i.e, automatic artifact uploads.</li> <li><code>revert</code>: Removes code previously merged.</li> </ul>"},{"location":"contributing/#opening-a-pull-request","title":"Opening a Pull Request","text":"<p>Once you are done implementing the changes, go ahead and open a pull request in the nsdf-slac repository.</p> <p>Open a PR</p> <p>You will need to set the compare branch to new branch you created in your forked branch, and the base branch should be main.</p>"},{"location":"contributing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>When you open a pull requests, a CI pipeline will be triggered, for different purposes testing, artifact building, etc. If your change causes the CI to fail you must make sure that you are not introducing breaking changes to the codebase. If you are unsure why your change is failing in the CI pipeline, you can mention one of the maintainers here.</p>"},{"location":"contributing/#merging-changes","title":"Merging Changes","text":"<p>After opening a pull request, a maintainer of the project will review the changes and determine if additional modifications are needed before merging your code. Once the maintainer has no further feedback, your code will be approved and merged into the project \ud83c\udf89.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to the NSDF Dark Matter project, you agree that your contributions will be licensed by a specific License. You can find this information in the LICENSE file of the nsdf-slac repository.</p>"},{"location":"dashboard/","title":"NSDF Dark Matter Dashboard","text":"(1) allows file selection and control (2) allows event selection. Control (3) filters data by electronics readout boards, and control (4) selects individual channels. Table (5) shows event metadata, and plot (6) provides an interactive view of pulse shapes  <p>The NSDF Dark Matter Dashboard provides a way to visualize the SuperCDMS DAQ data format and follows the event structure defined by Midas. The dashboard is made up of multiple components and is divided into two main sections: the sidebar controls and the channels plot.</p>"},{"location":"dashboard/#sidebar-controls","title":"\u2630 Sidebar controls","text":"<p>The controls located in the left sidebar manipulate the display of the channels plot section. The following components are part of the sidebar controls: the mid file selector, event text input, event controls, detector section, channel button grid, and event metadata table.</p>"},{"location":"dashboard/#mid-file-selector","title":"Mid File Selector","text":"<p>The mid file selector allows the user to select a specific mid file record from the storage. After selecting a mid file, the event text input becomes available.</p>"},{"location":"dashboard/#event-text-input","title":"Event text input","text":"<p>The event text input facilitates navigation through the different events as specified by the SuperCDMS DAQ data format. The user can search an specific event by typing the eventID number.</p>"},{"location":"dashboard/#event-controls","title":"Event controls","text":"<p>The event controls provide an alternative way to navigate through events in order. It consists of four buttons: first event, previous event, next event, and last event. When used in combination with the event text input, these buttons also allow navigation with respect to the eventID selected.</p>"},{"location":"dashboard/#detector-section","title":"Detector section","text":"<p>The detector multichoice allows the user to select the detectors of interest for a specific event. By selecting or deselecting a detector, the channels plot on the right updates accordingly (with all detectors selected by default). A checkbox is provided to enable or disable all detectors at once.</p>"},{"location":"dashboard/#channel-button-grid","title":"Channel button grid","text":"<p>The channel button grid corresponds to the 20 possible channels that a detector might have (all selected by default). When clicked, it will toggle the inclusion of channels from the selected detectors, either displaying or hiding them on the channels plot.</p>"},{"location":"dashboard/#event-metadata-table","title":"Event metadata table","text":"<p>The event metadata table dynamically displays the trigger type, readout type, and global timestamp associated with an eventID.</p>"},{"location":"dashboard/#channels-plot-section","title":"\ud83d\udcc8 Channels plot section","text":"<p>The section of the right displays the channels in a plot, and updates dynamically depending on the controls selected. A typical workflow might look like this:</p> <p></p> <p>The user starts with 2 detectors (D1, D2), and has 3 channels selected (C1,C2,C3). Therefore, the channels plot shows (D1C1, D1C2, D1C3, D2C1, D2C2, D2C3).</p> <p></p> <p>After, the user deselects C3 on the channel button grid, it removes the associated channel C3 from the detectors, resulting in plot (D1C1,D1C2, D2C1,D2C2).</p> <p></p> <p>Lastly, the user removes D2 from the multichoice detector, resulting in the plot (D1C1,D1C2). The channels of a detector are represented by a gradient of a color.</p>"},{"location":"library/","title":"NSDF Dark Matter Library","text":"<p>The <code>nsdf_dark_matter</code> library offers a pool of operations to work with dark matter datasets (R68, R76). Once you've downloaded the dataset using the NSDF Dark Matter CLI, this library helps you load and explore the data with a Python API.</p>"},{"location":"library/#prerequisites","title":"Prerequisites","text":"<p>Prerequisites</p> <p>If you do not have already an <code>idx</code> directory with dark matter datasets, you can check the CLI guide for a step by step walkthrough on how to obtain a dataset. If you are following from the CLI guide you can use the same environment and skip to Installing the Library</p>"},{"location":"library/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Virtual Environment</p> <p>To begin, make sure you have Python 3.10 or higher installed on your machine. You can download it from the official website: Install Python.</p> <p>In this guide, we will be using uv to manage a virtual environment. You can install <code>uv</code> by following this installation guide.</p> <p>Note</p> <p>If you prefer, you can use a different environment manager such as conda or Python's built-in venv.</p>"},{"location":"library/#creating-the-environment","title":"Creating the environment","text":"<p>To create a new virtual environment, run the following command in your terminal:</p> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>uv venv darkmatter_lib_env --python 3.10\n</code></pre> <p>Conda</p> <pre><code>conda create -n darkmatter_lib_env python=3.10\n</code></pre> <p>Python venv</p> <pre><code>python -m venv darkmatter_lib_env\n</code></pre>"},{"location":"library/#activating-the-environment","title":"Activating the environment","text":"<p>Next, we activate the environment:</p> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>source darkmatter_lib_env/bin/activate\n</code></pre> <p>Conda</p> <pre><code>conda activate darkmatter_lib_env\n</code></pre> <p>Python venv</p> <pre><code>source darkmatter_lib_env/bin/activate\n</code></pre> <p>You should now see the environment name in your terminal prompt, indicating it\u2019s active.</p>"},{"location":"library/#installing-the-library","title":"Installing the Library","text":""},{"location":"library/#pip-recommended","title":"pip (recommended)","text":"<p>To install the library via pip, run the following command:</p> <p>Library pip installation</p> <pre><code>pip install nsdf-dark-matter\n</code></pre>"},{"location":"library/#from-release","title":"From Release","text":"<p>To install the library from releases, download the <code>wheel</code> file.</p> <pre><code>wget https://github.com/nsdf-fabric/nsdf-slac/releases/download/v0.1.0/nsdf_dark_matter-0.1.0-py3-none-any.whl\n</code></pre> uv (recommended)CondaPython venv <p>uv (recommended)</p> <pre><code>uv pip install nsdf_dark_matter-0.1.0-py3-none-any.whl\n</code></pre> <p>Conda</p> <pre><code>pip install nsdf_dark_matter-0.1.0-py3-none-any.whl\n</code></pre> <p>Python venv</p> <pre><code>pip install nsdf_dark_matter-0.1.0-py3-none-any.whl\n</code></pre> <p>That's it! The library is now installed and ready to use. We can start working with it.</p>"},{"location":"library/#nsdf-dark-matter-library_1","title":"\ud83d\udcda NSDF Dark Matter Library","text":""},{"location":"library/#importing-the-library","title":"Importing the Library","text":"<p>First, import the <code>load_all_data</code> function from the idx module.</p> <pre><code>from nsdf_dark_matter.idx import load_all_data\n</code></pre>"},{"location":"library/#loading-a-dataset","title":"Loading a dataset","text":"<p>To work with the different operations of the library, we need to start by loading the dataset as follows.</p> <pre><code># specify the path to the dataset you want to use\ncdms = load_all_data('idx/07180827_0000_F0001')\n</code></pre>"},{"location":"library/#event-methods","title":"\u26a1Event Methods","text":""},{"location":"library/#getting-event-ids","title":"Getting event IDs","text":"<p>We can query for all the event IDs of the dataset like so.</p> <pre><code>event_ids = cdms.get_event_ids()\n</code></pre>"},{"location":"library/#obtaining-event-metadata","title":"Obtaining Event Metadata","text":"<p>Let's fetch the event metadata of our first event with the <code>get_event_metadata</code> method.</p> <pre><code>metadata = cdms.get_event_metadata(event_ids[0])\n</code></pre>"},{"location":"library/#getting-all-detectors-of-an-event","title":"Getting All Detectors of an Event","text":"<p>We can query to all the detectors of an event with the <code>get_detectors_by_event</code> method. Let's do that for our last event.</p> <pre><code>dec_ids = cdms.get_detectors_by_event(event_ids[-1])\n\n# channel data for those detectors\nfor detector_id in dec_ids:\n    channel_data = cdms.get_detector_channels(detector_id)\n</code></pre>"},{"location":"library/#detector-methods","title":"\u2699\ufe0fDetector methods","text":""},{"location":"library/#getting-detector-ids","title":"Getting Detector IDs","text":"<p>Similarly, we can query for all the detector IDs of the dataset.</p> <pre><code>detector_ids = cdms.get_detector_ids()\n</code></pre>"},{"location":"library/#retrieving-channel-data","title":"Retrieving Channel Data","text":"<p>Let's get the channel data for our first detector with the <code>get_detector_channels</code> method.</p> <pre><code>channel_data = cdms.get_detector_channels(detector_ids[0])\n</code></pre>"},{"location":"library/#full-example","title":"Full Example","text":"main.py <pre><code>from nsdf_dark_matter.idx import load_all_data\n\n# Loading the data from a valid idx structure\ncdms = load_all_data('idx/07180827_0000_F0001')\n\n# getting all event ids\nevent_ids = cdms.get_event_ids()\n\n# getting the metadata for the first event\nmetadata = cdms.get_event_metadata(event_ids[0])\n\n# getting all detectors for the last event id\ndec_ids = cdms.get_detectors_by_event(event_ids[-1])\n\n# channel data for those detectors\nfor detector_id in dec_ids:\n    channel_data = cdms.get_detector_channels(detector_id)\n\n# getting all detector ids\ndetector_ids = cdms.get_detector_ids()\n\n# getting channels associated with a the first detector id\nchannel_data = cdms.get_detector_channels(detector_ids[0])\n</code></pre>"},{"location":"library/#next-steps","title":"Next Steps","text":"<p>Now that you can manipulate the data, you could:</p> <ul> <li>\ud83d\udd04 Integrate into larger workflows.</li> <li>\ud83e\udd16 Build machine learning pipelines for dark matter.</li> <li>\ud83d\udcca Build dark matter dashboards</li> </ul> <p>We have provided a web-based visualization of the entire dataset with the NSDF Dark Matter Dashboard. Check the dashboard guide to learn more about its components!</p>"}]}